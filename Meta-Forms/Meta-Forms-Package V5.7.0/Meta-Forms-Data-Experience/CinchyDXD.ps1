param (
  # Common
  [Parameter(Position = 0, Mandatory = $false)] [String] $global:Action

  # Shared for pull, push
  , [Parameter(Mandatory = $false)] [String] $s
  , [Parameter(Mandatory = $false)] [String] $u
  , [Parameter(Mandatory = $false)] [String] $p
  , [Parameter(Mandatory = $false)] [String] $k
  , [Parameter(Mandatory = $false)] [Int]    $Start = 1
  , [Parameter(Mandatory = $false)] [Int]    $End = 11

  # Required for pull
  , [Parameter(Mandatory = $false)] [String]  $g
  , [Parameter(Mandatory = $false)] [String]  $o
  , [Parameter(Mandatory = $false)] [Version] $v

  # Optional for pull
  , [Parameter(Mandatory = $false)] [Switch] $x = $false # Keep output folder temp directory
  , [Parameter(Mandatory = $false)] [Switch] $w = $false # Write files to Cinchy

  # Optional for push
  , [Parameter(Mandatory = $false)] [String] $d
  , [Parameter(Mandatory = $false)] [Switch] $e = $false # Pause on errors
  , [Parameter(Mandatory = $false)] [Switch] $m = $false # Ignore Model errors
  , [Parameter(Mandatory = $false)] [Switch] $z = $false # Connections output
  , [Parameter(Mandatory = $false)] [Switch] $y = $false # Force push over existing
  , [Parameter(Mandatory = $false)] [String] $Skip
)

#region Set Global Parameters

# DXDF Common
$DxdfGuid            = "ada2e71c-a3c7-4a3b-8d84-8afb5258bfb8"
$ApiClientID         = "cinchy_dxd"
$ApiClientSecret     = "c0cfde958fec4c7598ac2e1df9a1ba15"
$CliModel            = "Cinchy"
$DxdCliVersion       = [version]"1.0.0"
$CinchyMinVersion    = [version]"5.7.0"
$DxdVersion          = [version]"1.7.0"

# Environment
$KeepFiles           = ($w) ? $true : $false
$KeepTemp            = ($x) ? $true : $false
$ForceInstall        = ($y) ? $true : $false
$global:PauseOnError = ($e) ? $true : $false
$global:PauseOnModel = ($m) ? $false : $true
$ConnectionsOutput   = ($z) ? $true : $false
$Location            = Split-Path $MyInvocation.MyCommand.Path
$Skips               = ($Skip -split ",").Trim()

# Data Experience Definition
$DxdGuid             = $g
$ReleaseVersion      = $v

# Cinchy Server
$CinchyServer        = $s
$CinchyUser          = $u
$CinchyPswd          = $p

# DXD Environment
$ConnectionsTempPath = $d
$CinchyDeployPath    = $o
$KeyFile             = $k

#endregion Set Global Parameters

#region Help Templates
$Version = @"

 CinchyDXD $($DxdVersion)
 Copyright (C) $(Get-Date -Format yyyy) CinchyDXD

"@
$Help = @"
 export   Exports a Data Experience from a Cinchy source environment.

 install  Installs a Data Experience in a Cinchy target environment.

 keygen   Generates an encryption key file.

 help     Displays this help text. To display help for an action, pass only that action

 version  Displays version information.

"@
$ExportCommandHelp = @"

 export                         Required. Exports a Data Experience from a Cinchy source environment.

"@
$InstallCommandHelp = @"

 install                        Required. Installs a Data Experience in a Cinchy target environment.

"@
$KeygenCommandHelp = @"

 keygen                         Required. Used to generate an encryption key file.

"@
$CommonHelp = @"
 -s     (Cinchy Server)         Required. The full path to the Cinchy server without the protocol (e.g.
                                          cinchy.com/Cinchy).

"@
$ExportHelp = @"
 -u     (Username)              Optional. The user id for accessing Cinchy. Username is required when
                                          not using a Personal Access Token.

 -p     (Password)              Required. The clear text password of the Username provided, or a Personal
                                          Access Token. If using a Personal Access Token, do not provide
                                          -u (Username)

 -g     (DXD Guid)              Required. The Data Experience Definition Guid.

 -v     (DXD Version)           Required. The Data Experience Definition Version.

 -o     (DXD Output Directory)  Required. The path to a directory where CinchyDXD will create
                                          the Data Experience release export.

 -k     (Encryption Key File)   Optional. This is the path to the encryption key file. The key file is
                                          used when encrypting the metadata generated by DXD Export.
                                          It is important to note that the same key file needs to be
                                          used during package installation.

 -w     (Write Binary Files     Optional. Flag indicating that CinchyDXD should save the release files
         to Cinchy)                       into Cinchy.

 -x     (CinchyDXD Temp         Optional. Flag indicating that CinchyDXD should not clean up the output
         Directory)                       temp directory.

 -start (Start Step)            Optional. The Export Step to start from.

 -end   (End Step)              Optional. The Export Step to end on.

"@
$InstallHelp = @"
 -u     (Username)              Required. The user id for accessing Cinchy.

 -p     (Password)              Required. The clear text password of the username provided.
 
 -d     (Connections Temp       Optional. The path to a directory that Connections can use for storing
         Directory)                       temporary files to support the sync.

 -e     (Pause On Errors)       Optional. Prompt to continue on Connection and Model Loader errors.

 -m     (Ignore Model Errors)   Optional. Do not stop on ModelLoader errors.

 -z     (Display Sync Output)   Optional. Displays the Connections output on completion.

 -k     (Encryption Key File)   Optional. This is the path to the encryption key file. The key file is used
                                          to decrypt the metadata within the DXD package. It's essential to
                                          use the same key file that was used during the generation of the
                                          package by DXD Export.

 -skip  (Skip Sync)             Optional. Comma delimited list of Tables and/or Table.Column(s) to skip when
                                          the sync for a table is performed.

 -start (Start Step)            Optional. The Install Step to start from.

 -end   (End Step)              Optional. The Install Step to end on.

 -y     (Force Install)         Optional. Force the install if the release already exists in the target.

"@
$KeygenHelp = @"
 -o     (DXD Output Directory)  Required. This is the path to the directory where the encryption key file
                                          will be created. You can use this key file later to encrypt the
                                          metadata written by DXD during Export and decrypt metadata read
                                          during DXD Import.

"@
#endregion Help Templates

Write-Host $Version

#region Validate parameters
switch ($global:Action) {
  'export' {
    if (Test-Path $(Join-Path $Location "scripts/ps/pull.ps1") -PathType Leaf) {
      if ( !$s, !$p, !$g, !$v, !$o -contains $true ) {
        Write-Host " ERROR(s)`n"
        $global:Action = 'export-help'
      }
      if (!$s) { Write-Host " Required option -s (Cinchy Server) is missing." }
      if (!$p) { Write-Host " Required option -p (Password) is missing." }
      if (!$g) { Write-Host " Required option -g (DXD Guid) is missing." }
      if (!$v) { Write-Host " Required option -v (DXD Version) is missing." }
      if (!$o) { Write-Host " Required option -o (DXD Output Directory) is missing." }
    }
    else {
      Write-Host " ERROR(s)`n"
      Write-Host " Export must be run from within the CinchyDXD directory.`n"
      exit 2
    }
  }
  'install' {
    if ((Test-Path $(Join-Path $Location "dxd.ini") -PathType Leaf) -and (Test-Path $(Join-Path $Location "scripts/push.ps1") -PathType Leaf)) {
      if ( !$s, !$u, !$p -contains $true ) {
        Write-Host " ERROR(s)`n"
        $global:Action = 'install-help'
      }
      if (!$s) { Write-Host " Required option -s (Cinchy Server) is missing." }
      if (!$u) { Write-Host " Required option -u (Username) is missing." }
      if (!$p) { Write-Host " Required option -p (Password) is missing." }
    }
    else {
      Write-Host " ERROR(s)`n"
      Write-Host " Install must be run from within a release directory.`n"
      exit 2
    }
  }
  'keygen' {
    if (Test-Path $(Join-Path $Location "scripts/ps/pull.ps1") -PathType Leaf) {
      if ( !$o -contains $true ) {
        Write-Host " ERROR(s)`n"
        $global:Action = 'keygen-help'
      }
      if (!$o) { Write-Host " Required option -o (DXD Output Directory) is missing." }
    }
    else {
      Write-Host " ERROR(s)`n"
      Write-Host " Keygen must be run from within the CinchyDXD directory.`n"
      exit 2
    }
  }
  'version' {}
  'help' {}
  Default {
    Write-Host " ERROR(s)`n"
    Write-Host " `'$global:Action' is an unknown action. Valid actions are:`n"
    $global:Action = 'help'
  }
}
#endregion Validate parameters

# Perform the requested Action
switch ($global:Action) {
  'export' {
    # Log setup
    $LogPath = $(Join-Path $CinchyDeployPath "logs")
    New-Item -Path $LogPath -ItemType Directory -Force | Out-Null

    . $(Join-Path $Location "scripts/ps/pull.ps1")
  }
  'install' {
    # Log setup
    $LogPath = $(Join-Path $Location "logs")
    New-Item -Path $LogPath -ItemType Directory -Force | Out-Null

    . $(Join-Path $Location "scripts/push.ps1")
  }
  'keygen' {
    # Log setup
    $LogPath = $(Join-Path $CinchyDeployPath "logs")
    New-Item -Path $LogPath -ItemType Directory -Force | Out-Null

    . $(Join-Path $Location "scripts/ps/_functions.ps1")
    CreateEncryptionKey (Join-Path $o "dxd.key")
  }
  'help' {
    Write-Host $Help
    exit 0
  }
  'export-help' {
    Write-Host $ExportCommandHelp
    Write-Host $CommonHelp
    Write-Host $ExportHelp
    exit 2
  }
  'install-help' {
    Write-Host $InstallCommandHelp
    Write-Host $CommonHelp
    Write-Host $InstallHelp
    exit 2
  }
  'keygen-help' {
    Write-Host $KeygenCommandHelp
    Write-Host $KeygenHelp
    exit 2
  }
}
